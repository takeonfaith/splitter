import React, { useState } from "react";
import styled from "styled-components";
import { Block } from "../../common/block";
import { Button } from "../../common/button";
import { TProduct } from "../../entity/product/type";
import { Edit2, MoreVertical } from "react-feather";
import Avatar from "../../components/user/avatar";
import { Checkbox } from "../../common/checkbox";

const ProductItemStyled = styled(Block)<{
  edit: boolean;
  openContext: boolean;
}>`
  cursor: pointer;
  user-select: none;
  display: flex;
  flex-direction: column;
  row-gap: 8px;
  position: relative;

  .top {
    width: 100%;
    display: flex;
    align-items: center;

    .context {
      transition: 0.2s opacity;
      position: absolute;
      top: 50px;
      right: 25px;
      opacity: ${({ openContext }) => +openContext};
      background: var(--tg-theme-bg-color);
      box-shadow: 0 1px 3px #00000030;
      padding: 10px;
      border-radius: 6px;
      width: 200px;
    }
  }

  &.md {
    justify-content: space-between;
    column-gap: 8px;
    animation: fadeIn 0.2s forwards;
    border: ${({ edit }) =>
      edit ? "2px solid var(--tg-theme-button-color)" : "none"};

    .left {
      width: 100%;
      display: flex;
      column-gap: 8px;
      align-items: center;

      .text {
        display: flex;
        flex-direction: column;

        .info {
          font-size: 0.85rem;
          margin-top: 4px;
          color: var(--tg-theme-hint-color);
          display: flex;
          column-gap: 8px;
        }
      }
    }
  }

  &.sm {
    flex-direction: column;
    height: fit-content;
    width: calc(100% / 3 - 5.4px);
    display: inline-flex;

    .left {
      display: flex;
      flex-direction: column;
      align-items: center;

      .text {
        margin-top: 10px;

        b {
          font-size: 0.9rem;
        }

        .info {
          display: none;
        }
      }
    }

    .more-btn {
      display: none;
    }
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
      transform: translateY(10px);
    }
    100% {
      opacity: 1;
      transform: translateY(0px);
    }
  }
`;

const icons = {
  –ü–∏—Ü—Ü–∞: "üçï",
  –ë—É—Ä–≥–µ—Ä: "üçî",
  –ö–æ–ª–∞: "ü•§",
  –°–ø—Ä–∞–π—Ç: "ü•§",
  –§–∞–Ω—Ç–∞: "ü•§",
  –ü–µ–ø—Å–∏: "ü•§",
  –ù–∞–ø–∏—Ç–∫–∏: "ü•§",
  –ö–æ–∫—Ç–µ–π–ª—å: "üç∏",
  –í–∏—Å–∫–∏: "ü•É",
  –í–∏–Ω–æ: "üç∑",
  –ü–∏–≤–æ: "üç∫",
  –®–∞—à–ª—ã–∫: "üç¢",
  –ú—è—Å–æ: "ü•©",
  –í–æ–¥–∞: "üíß",
  –°–æ—É—Å: "üß¥",
  –®–æ–∫–æ–ª–∞–¥: "üç´",
  –ö–æ–Ω—Ñ–µ—Ç—ã: "üç¨",
  –ú–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ: "üç¶",
  –°—É–ø: "ü•£",
  –¢–æ—Ä—Ç: "üéÇ",
  –°—ã—Ä: "üßÄ",
  "–•–æ—Ç-–¥–æ–≥": "üå≠",
  –ë–ª–∏–Ω—ã: "ü•û",
  –•–ª–µ–±: "üçû",
  –°—ç–Ω–¥–≤–∏—á: "ü•™",
  –ü–æ–Ω—á–∏–∫: "üç©",
  –ê—Ä–±—É–∑: "üçâ",
  –ë–∞–Ω–∞–Ω: "üçå",
  –Ø–±–ª–æ–∫–æ: "üçé",
  –ö–ª—É–±–Ω–∏–∫–∞: "üçì",
  –û–≥—É—Ä–µ—Ü: "ü•í",
  –ú–æ–∫—Ä–æ–≤—å: "ü•ï",
  –ë–∞—Ç–æ–Ω: "ü•ñ",
  –°—É—à–∏: "üç£",
  –ö–æ—Ñ–µ: "‚òï",
  –ß–∞–π: "‚òï",
  –°–æ–∫: "üßÉ",
  –ö—É—Ä—É—Ä—É–∑–∞: "üåΩ",
};

type Props = TProduct & {
  edit?: boolean;
  chosen?: boolean;
  onEdit?: (id: string) => void;
  onChoose?: (product: TProduct) => void;
  index?: number;
  size?: "sm" | "md";
};

const ProductItem = ({
  id,
  name,
  price,
  quantity,
  onEdit,
  onChoose,
  index,
  size = "md",
  edit = false,
  chosen = false,
}: Props) => {
  const [openContext, setOpenContext] = useState(false);
  const handleEdit = () => {
    onEdit?.(id);
    setOpenContext(false);
  };

  const handleChoose = () => {
    onChoose?.({ id, name, price, quantity } as TProduct);
  };

  const handleOpenContext = () => {
    setOpenContext((prev) => !prev);
  };

  return (
    <ProductItemStyled
      edit={edit}
      className={"product-item " + size}
      onClick={handleChoose}
      openContext={openContext}
    >
      <div className="top">
        <div className="left">
          {index && <span>{index}. </span>}
          <Avatar
            icon={icons[name.trim() as keyof typeof icons] ?? "üì¶"}
            chosen={chosen}
          />
          <div className="text">
            <b>
              {size === "sm"
                ? name.substring(0, 10) + (name.length > 10 ? "..." : "")
                : name}
            </b>
            <div className="info">
              <div>
                –¶–µ–Ω–∞: <span>{price}</span> —Ä—É–±.
              </div>
              ‚Ä¢
              <div>
                –ö–æ–ª-–≤–æ: <span>{quantity}</span> —à—Ç.
              </div>
            </div>
          </div>
        </div>
        <Button
          color={"var(--tg-theme-text-color)"}
          background={"var(--tg-theme-secondary-bg-color)"}
          active
          onClick={handleOpenContext}
          className="more-btn"
          width="40px"
        >
          <MoreVertical />
        </Button>
        <div className="context">
          <Button
            color={"var(--tg-theme-text-color)"}
            background={"var(--tg-theme-secondary-bg-color)"}
            active
            onClick={handleEdit}
            className="edit-btn"
            width="100%"
            align="left"
          >
            <Edit2 />
            –ò–∑–º–µ–Ω–∏—Ç—å
          </Button>
          <Checkbox
            title="–†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –≤—Å–µ—Ö"
            onChange={() => null}
            view="toggle"
          />
        </div>
      </div>
      –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –≤—Å–µ—Ö
    </ProductItemStyled>
  );
};

export default ProductItem;
